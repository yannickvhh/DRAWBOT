/***************************************************************************
 * Drawbot
 * ECE Paris 
 ***************************************************************************/

#include <Arduino.h>
#include <Wire.h>              // Pour I2C (IMU)
#include <SparkFunLSM6DS3.h> // Pour l'IMU LSM6DS3

// LEDs
#define LEDU1 25
#define LEDU2 26

// Moteurs
#define EN_D 23 // Enable Moteur Droit
#define EN_G 4  // Enable Moteur Gauche
#define IN_1_D 19 // Moteur Droit - Arrière
#define IN_2_D 18 // Moteur Droit - Avant
#define IN_1_G 17 // Moteur Gauche - Avant
#define IN_2_G 16 // Moteur Gauche - Arrière

// Encodeurs
#define ENC_G_CH_A 32
#define ENC_G_CH_B 33
#define ENC_D_CH_A 27
#define ENC_D_CH_B 14

// I2C
#define SDA_PIN 21 // Broche SDA pour I2C
#define SCL_PIN 22 // Broche SCL pour I2C

// Adresses I2C
#define ADDR_IMU 0x6B // Adresse IMU LSM6DS3
// #define ADDR_MAG 0x1E // Adresse Magnétomètre (pas utilisé pour l'instant)

// PWM Moteurs
const int FREQ_PWM = 1000;    // Fréquence PWM
const int RESOLUTION_PWM = 8; // Résolution PWM (0-255)
const int VITESSE_MAX = 255;
// Canaux PWM (pour ESP32, on peut en choisir)
const int CANAL_D_AVANT = 0;
const int CANAL_D_ARRIERE = 1;
const int CANAL_G_AVANT = 2;
const int CANAL_G_ARRIERE = 3;

// IMU et Gyroscope
LSM6DS3 myIMU(I2C_MODE, ADDR_IMU); // Crée l'objet IMU
float angleZ = 0.0;                // Angle Z du robot (calculé)
float gyroZ_offset = 0.0;          // Offset du gyroscope Z après calibration
bool imuOK = false;                // Pour savoir si l'IMU est bien initialisée
unsigned long tempsGyro_prec = 0;  // Temps précédent pour calcul angle gyro
float gyroZ_filtre_prec = 0.0;     // Valeur filtrée précédente du gyro Z
const float ALPHA_GYRO = 0.1;      // Coeff pour filtre passe-bas du gyro

// Encodeurs
volatile long compteurG = 0; // Compteur encodeur Gauche
volatile long compteurD = 0; // Compteur encodeur Droit

// Constantes pour le calcul de distance (à ajuster selon votre robot)
const float DIAMETRE_ROUE_CM = 9.0; // Diamètre de la roue en cm
const float CIRCONFERENCE_ROUE_CM = DIAMETRE_ROUE_CM * PI; // PI est une constante Arduino
const int TICKS_PAR_TOUR_ENCODEUR = 1050; // Nombre de ticks pour un tour complet de l'encodeur
                                        

// PID pour avancer droit 
float kp_pid = 1.0; // Coeff Proportionnel
float ki_pid = 0.0; // Coeff Intégral
float kd_pid = 0.0; // Coeff Dérivé
float erreur_prec_pid = 0;
float somme_erreurs_pid = 0;

// Variables pour la machine à états de test dans loop()
int etat_loop = 0;
unsigned long temps_etat_loop = 0;

// --- Fonctions d'Interruption pour Encodeurs ---
void IRAM_ATTR isr_enc_g() {
  compteurG++;
}
void IRAM_ATTR isr_enc_d() {
  compteurD++;
}

// --- Fonctions Moteurs ---
void moteur_droit_vitesse(int vitesse) {
  vitesse = constrain(vitesse, -VITESSE_MAX, VITESSE_MAX);
  if (vitesse > 0) { 
    ledcWrite(CANAL_D_ARRIERE, 0);
    ledcWrite(CANAL_D_AVANT, vitesse);
  } else if (vitesse < 0) { 
    ledcWrite(CANAL_D_AVANT, 0);
    ledcWrite(CANAL_D_ARRIERE, -vitesse);
  } else { 
    ledcWrite(CANAL_D_AVANT, 0);
    ledcWrite(CANAL_D_ARRIERE, 0);
  }
}

void moteur_gauche_vitesse(int vitesse) {
  vitesse = constrain(vitesse, -VITESSE_MAX, VITESSE_MAX);
  if (vitesse > 0) { 
    ledcWrite(CANAL_G_ARRIERE, 0);
    ledcWrite(CANAL_G_AVANT, vitesse);
  } else if (vitesse < 0) { 
    ledcWrite(CANAL_G_AVANT, 0);
    ledcWrite(CANAL_G_ARRIERE, -vitesse);
  } else { 
    ledcWrite(CANAL_G_AVANT, 0);
    ledcWrite(CANAL_G_ARRIERE, 0);
  }
}

void moteurs_arret() {
  moteur_droit_vitesse(0);
  moteur_gauche_vitesse(0);
}

// --- Fonctions Capteurs ---
void reset_compteurs_enc() {
  compteurG = 0;
  compteurD = 0;
  erreur_prec_pid = 0; 
  somme_erreurs_pid = 0; 
}

void reset_angle_gyro() {
  angleZ = 0.0;
  tempsGyro_prec = millis();
  gyroZ_filtre_prec = 0.0;
}

float lire_gyro_angleZ() {
  if (!imuOK) return angleZ;
  unsigned long t_actuel = millis();
  float dt = (t_actuel - tempsGyro_prec) / 1000.0; 
  tempsGyro_prec = t_actuel;
  if (dt <= 0) return angleZ; 
  float gyroZ_brut = myIMU.readFloatGyroZ() - gyroZ_offset;
  float gyroZ_filtre = ALPHA_GYRO * gyroZ_brut + (1.0 - ALPHA_GYRO) * gyroZ_filtre_prec;
  gyroZ_filtre_prec = gyroZ_filtre;
  if (abs(gyroZ_filtre) > 0.15) { 
    angleZ += gyroZ_filtre * dt;
  }
  return angleZ;
}

// --- Fonctions de Mouvement ---
void avancer_pid(int vitesse_base) {
  if (vitesse_base == 0) {
    moteurs_arret();
    return;
  }
  float erreur = compteurD - compteurG; 
  somme_erreurs_pid += erreur;
  somme_erreurs_pid = constrain(somme_erreurs_pid, -500, 500); 
  float derivee_erreur = erreur - erreur_prec_pid;
  erreur_prec_pid = erreur;
  float correction = (kp_pid * erreur) + (ki_pid * somme_erreurs_pid) + (kd_pid * derivee_erreur);
  correction = constrain(correction, -50, 50); 
  int vit_D = vitesse_base - (int)correction;
  int vit_G = vitesse_base + (int)correction;
  vit_D = constrain(vit_D, 0, VITESSE_MAX); 
  vit_G = constrain(vit_G, 0, VITESSE_MAX);
  moteur_droit_vitesse(vit_D);
  moteur_gauche_vitesse(vit_G);
}

void tourner_gyro(float angle_cible_deg, int vitesse_rot) {
  Serial.print("Rotation vers: "); Serial.print(angle_cible_deg); Serial.println(" deg");
  reset_angle_gyro(); 
  float angle_actuel = 0.0;
  float marge_stop = 12.0; 
  if (angle_cible_deg > 0) { 
    moteur_gauche_vitesse(vitesse_rot);
    moteur_droit_vitesse(-vitesse_rot);
  } else if (angle_cible_deg < 0) { 
    moteur_gauche_vitesse(-vitesse_rot);
    moteur_droit_vitesse(vitesse_rot);
  } else {
    moteurs_arret();
    return; 
  }
  while (abs(angle_actuel) < abs(angle_cible_deg) - marge_stop) {
    angle_actuel = lire_gyro_angleZ();
    delay(5); 
  }
  moteurs_arret();
  Serial.print("Rotation finie. Angle final: "); Serial.println(lire_gyro_angleZ());
  delay(200); 
}


void avancer_distance(float distance_cm, int vitesse_avance) {
  Serial.print("Avancer de: "); Serial.print(distance_cm); Serial.println(" cm");
  reset_compteurs_enc(); // Remettre les compteurs à zéro avant de commencer

  // Calculer le nombre de ticks d'encodeur nécessaires pour cette distance
  // Ticks = (Distance / Circonférence) * TicksParTour
  long ticks_objectif = (long)((distance_cm / CIRCONFERENCE_ROUE_CM) * TICKS_PAR_TOUR_ENCODEUR);
  Serial.print("Objectif en ticks: "); Serial.println(ticks_objectif);

  if (ticks_objectif <= 0) {
    Serial.println("Distance nulle ou négative, pas de mouvement.");
    return;
  }

  // Boucle tant que la moyenne des ticks des deux encodeurs n'a pas atteint l'objectif
  // On utilise la moyenne pour être un peu plus robuste si une roue patine légèrement
  // ou si le PID n'est pas parfait.
  while ((compteurG + compteurD) / 2 < ticks_objectif) {
    avancer_pid(vitesse_avance); // Utilise le PID pour essayer d'aller droit
    
    // Affichage pour debug (optionnel)
    /*
    Serial.print("Ticks G: "); Serial.print(compteurG);
    Serial.print(" | Ticks D: "); Serial.print(compteurD);
    Serial.print(" | Objectif: "); Serial.println(ticks_objectif);
    */
    delay(20); // Petit délai pour la boucle de contrôle
  }

  moteurs_arret(); // Arrêter les moteurs une fois la distance atteinte
  Serial.println("Distance atteinte.");
  delay(200); // Petite pause après le mouvement
}


// --- Setup ---
void setup() {
  Serial.begin(115200);
  Serial.println("\n--- Init Drawbot (Style Etudiant - Escalier) ---");
  pinMode(LEDU1, OUTPUT); pinMode(LEDU2, OUTPUT);
  digitalWrite(LEDU1, LOW); digitalWrite(LEDU2, LOW);
  Wire.begin(SDA_PIN, SCL_PIN);
  Serial.println("I2C OK.");
  pinMode(EN_D, OUTPUT); pinMode(EN_G, OUTPUT);
  digitalWrite(EN_D, HIGH); digitalWrite(EN_G, HIGH); 
  pinMode(IN_1_D, OUTPUT); pinMode(IN_2_D, OUTPUT);
  pinMode(IN_1_G, OUTPUT); pinMode(IN_2_G, OUTPUT);
  ledcSetup(CANAL_D_AVANT, FREQ_PWM, RESOLUTION_PWM); ledcAttachPin(IN_2_D, CANAL_D_AVANT);
  ledcSetup(CANAL_D_ARRIERE, FREQ_PWM, RESOLUTION_PWM); ledcAttachPin(IN_1_D, CANAL_D_ARRIERE);
  ledcSetup(CANAL_G_AVANT, FREQ_PWM, RESOLUTION_PWM); ledcAttachPin(IN_1_G, CANAL_G_AVANT);
  ledcSetup(CANAL_G_ARRIERE, FREQ_PWM, RESOLUTION_PWM); ledcAttachPin(IN_2_G, CANAL_G_ARRIERE);
  moteurs_arret();
  Serial.println("Moteurs OK.");
  pinMode(ENC_G_CH_A, INPUT_PULLUP); pinMode(ENC_G_CH_B, INPUT_PULLUP);
  pinMode(ENC_D_CH_A, INPUT_PULLUP); pinMode(ENC_D_CH_B, INPUT_PULLUP);
  attachInterrupt(digitalPinToInterrupt(ENC_G_CH_A), isr_enc_g, RISING);
  attachInterrupt(digitalPinToInterrupt(ENC_D_CH_A), isr_enc_d, RISING);
  reset_compteurs_enc();
  Serial.println("Encodeurs OK.");
  if (myIMU.begin() != 0) {
    Serial.println("ERREUR IMU!");
    while (true) { digitalWrite(LEDU1, HIGH); delay(100); digitalWrite(LEDU1, LOW); delay(100); } 
  }
  Serial.println("IMU detectee. Calibration gyro Z (2s)...");
  long t_calib = millis(); int n_calib = 0; gyroZ_offset = 0;
  while (millis() - t_calib < 2000) {
    gyroZ_offset += myIMU.readFloatGyroZ(); n_calib++; delay(5);
  }
  if (n_calib > 0) gyroZ_offset /= n_calib;
  Serial.print("Offset Gyro Z: "); Serial.println(gyroZ_offset);
  imuOK = true;
  reset_angle_gyro(); 
  Serial.println("IMU OK.");
  Serial.println("--- Drawbot Pret --- ");
  digitalWrite(LEDU2, HIGH); 
  temps_etat_loop = millis();
}

// --- Loop ---
void loop() {
  // Machine a etats pour tester l'escalier
  switch (etat_loop) {
    case 0: // Prêt à commencer la séquence de l'escalier
      Serial.println("Loop Etat 0: Debut sequence escalier");
      etat_loop = 10; // Premier segment de la première marche
      break;

    // MARCHE 1
    case 10: // Avancer de 20cm (premier segment horizontal)
      Serial.println("Marche 1 - Segment 1 (avance 20cm)");
      avancer_distance(20.0, 60); // Avance de 20cm à vitesse 100
      etat_loop = 11;
      break;
    case 11: // Tourner de 90 degrés à droite
      Serial.println("Marche 1 - Virage 1 (+90 deg)");
      tourner_gyro(90.0, 60); // Tourne à droite
      etat_loop = 12;
      break;
    case 12: // Avancer de 20cm (premier segment vertical)
      Serial.println("Marche 1 - Segment 2 (avance 20cm)");
      avancer_distance(20.0, 60);
      etat_loop = 13; // On pourrait s'arrêter ici pour une seule marche, ou continuer
      break;
    // Pour un escalier, il faudrait tourner à gauche pour se préparer à la prochaine marche
    case 13: // Tourner de 90 degrés à gauche pour la marche suivante
      Serial.println("Marche 1 - Virage 2 (-90 deg pour préparer marche 2)");
      tourner_gyro(-90.0, 60); // Tourne à gauche
      etat_loop = 20; // Prêt pour la marche 2
      break;

    // MARCHE 2 (à ajouter sur le même modèle)
    case 20: 
      Serial.println("Marche 2 - Segment 1 (avance 20cm)");
      avancer_distance(20.0, 60); 
      etat_loop = 21;
      break;
    case 21: 
      Serial.println("Marche 2 - Virage 1 (+90 deg)");
      tourner_gyro(90.0, 60); 
      etat_loop = 22;
      break;
    case 22: 
      Serial.println("Marche 2 - Segment 2 (avance 20cm)");
      avancer_distance(20.0, 60);
      etat_loop = 23; 
      break;
    case 23: 
      Serial.println("Marche 2 - Virage 2 (-90 deg pour préparer marche 3)");
      tourner_gyro(-90.0, 60); 
      etat_loop = 30; // Prêt pour la marche 3
      break;

    // MARCHE 3 (à ajouter sur le même modèle)
    case 30: 
      Serial.println("Marche 3 - Segment 1 (avance 20cm)");
      avancer_distance(20.0, 60); 
      etat_loop = 31;
      break;
    case 31: 
      Serial.println("Marche 3 - Virage 1 (+90 deg)");
      tourner_gyro(90.0, 60); 
      etat_loop = 32;
      break;
    case 32: 
      Serial.println("Marche 3 - Segment 2 (avance 20cm)");
      avancer_distance(20.0, 60);
      etat_loop = 99; // Fin de l'escalier
      break;

    case 99: // Fin de la séquence
      Serial.println("Sequence escalier terminee.");
      digitalWrite(LEDU1, !digitalRead(LEDU1)); 
      delay(500);
      // Pour ne pas recommencer, on reste ici. Pour recommencer : etat_loop = 0;
      break;
  }
}

