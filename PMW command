#include <Arduino.h>

// User led
#define LEDU1 25
#define LEDU2 26
// Enable moteurs droit et gauche
#define EN_D 23
#define EN_G 4
// Commande PWM moteur droit
#define IN_1_D 19 //arriere
#define IN_2_D 18 //avant
// Commande PWM moteur gauche
#define IN_1_G 17 //avant
#define IN_2_G 16 //arriere
// Encodeur gauche
#define ENC_G_CH_A 32
#define ENC_G_CH_B 33
// Encodeur droit
#define ENC_D_CH_A 27
#define ENC_D_CH_B 14
// I2C
#define SDA 21
#define SCL 22
// Adresse I2C
#define ADDR_IMU 0x6B
#define ADDR_MAG 0x1E

volatile int compteurG = 0;
volatile int compteurD = 0;

const float circonferenceRoue = 28.27; // en cm, pour roue de 9 cm de diamètre
const int topsParTour = 1060; // nombre de tops par tour de roue
int objectif = 0; // Objectif de distance à parcourir (en cm)
bool enMarche = false;

int vitesseMoteur = 150; // vitesse moteur (entre 0 et 255)

// Interruption pour roue gauche
void IRAM_ATTR interruptionGauche() {
  if(digitalRead(ENC_G_CH_B)==HIGH) {
    compteurG--;
  } else {
    compteurG++;
  }
}

// Interruption pour roue droite
void IRAM_ATTR interruptionDroite() {
  if(digitalRead(ENC_D_CH_B)==HIGH) {
    compteurD++;
  } else {
    compteurD--;
  }
}

void avancer() {
  // Moteur droit
  digitalWrite(IN_1_D, LOW);
  ledcWrite(0, vitesseMoteur); // IN_2_D avant
  
  // Moteur gauche
  digitalWrite(IN_2_G, LOW);
  ledcWrite(1, vitesseMoteur); // IN_1_G avant
}

void arreter() {
  ledcWrite(0, 0); // Moteur droit stop
  ledcWrite(1, 0); // Moteur gauche stop
}

void setup() {
  Serial.begin(115200);

  // Config broches
  pinMode(LEDU1, OUTPUT);

  pinMode(EN_D, OUTPUT);
  pinMode(IN_1_D, OUTPUT);
  pinMode(IN_2_D, OUTPUT);
    
  pinMode(EN_G, OUTPUT);
  pinMode(IN_1_G, OUTPUT);
  pinMode(IN_2_G, OUTPUT);

  // Activer moteurs
  digitalWrite(EN_D, HIGH);
  digitalWrite(EN_G, HIGH);

  // Broches encodeurs
  pinMode(ENC_G_CH_A, INPUT);
  pinMode(ENC_D_CH_A, INPUT);
  pinMode(ENC_G_CH_B, INPUT);
  pinMode(ENC_D_CH_B, INPUT);

  // Attacher interruptions
  attachInterrupt(digitalPinToInterrupt(ENC_G_CH_A), interruptionGauche, RISING);
  attachInterrupt(digitalPinToInterrupt(ENC_D_CH_A), interruptionDroite, RISING);

  // Calcul objectif (20cm)
  objectif = int((20.0 / circonferenceRoue) * topsParTour);

  // Config PWM
  const int freq = 1000;
  const int resolution = 8;
  
  // Canal 0 et 1 pour moteur droit
  ledcSetup(0, freq, resolution);
  ledcAttachPin(IN_2_D, 0); // Avant droit
  
  // Canal 1 et 2 pour moteur gauche
  ledcSetup(1, freq, resolution);
  ledcAttachPin(IN_1_G, 1); // Avant gauche

  // Démarrer les moteurs
  avancer();
  enMarche = true;
}

void loop() {
  if(enMarche && abs(compteurG) >= objectif && abs(compteurD) >= objectif) {
    arreter();
    Serial.println("Objectif atteint ! Distance de 20cm atteinte !");
    enMarche = false;
  }
  
  float distanceG = (compteurG * circonferenceRoue) / topsParTour;
  float distanceD = (compteurD * circonferenceRoue) / topsParTour;
  
  Serial.print("distance Gauche : ");
  Serial.print(distanceG);
  Serial.print("cm | distance Droite : ");
  Serial.print(distanceD);
  Serial.println(" cm ");
  
  delay(500);
}
